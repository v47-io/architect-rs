name: Release

on:
  push:
    tags:
      - v*

jobs:
  build-release:
    name: Build Release Artifact for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: target/release/architect
            asset_name: linux
          - os: windows-latest
            artifact_name: target/release/architect.*
            asset_name: windows
          - os: macos-latest
            artifact_name: target/release/architect
            asset_name: macos

    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install pkg-config libssl-dev

      - if: ${{ matrix.os == 'windows-latest' }}
        run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      - if: ${{ matrix.os == 'windows-latest' }}
        run: vcpkg install openssl:x64-windows-static-md

      - if: ${{ matrix.os == 'macos-latest' }}
        run: brew install openssl@1.1

      - name: Build
        run: cargo build --release --bin architect --locked

      - if: ${{ matrix.os == 'windows-latest' }}
        run: rm target/release/architect.d

      - name: Upload binaries to release
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.artifact_name }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - build-release

    steps:
      - run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.VERSION }}
          draft: true
          prerelease: false

      - uses: actions/download-artifact@v2
        id: download
        with:
          path: artifacts

      - run: sudo apt-get install zip

      - name: Prepare Release Assets
        working-directory: ${{ steps.download.outputs.download-path }}
        run: |
          VERSION=$(echo $VERSION | sed 's/^v//')
          
          chmod +x {linux,macos}/architect
          
          LINUX_NAME=architect-$VERSION-linux-amd64.tar.gz
          MACOS_NAME=architect-$VERSION-darwin-amd64.tar.gz
          WINDO_NAME=architect-$VERSION-windows-amd64.zip
          
          cd linux && tar -czf $LINUX_NAME * && mv $LINUX_NAME ../ && cd ..
          cd macos && tar -czf $MACOS_NAME * && mv $MACOS_NAME ../ && cd ..
          zip -j -r $WINDO_NAME windows
          
          rm -rf linux macos windows

      - name: Uploading Release Assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: ${{ steps.download.outputs.download-path }}
